# Default values for Gafaelfawr.

replicaCount: 1

# nameOverride and fullnameOverride change the naming of chart resources
nameOverride: ""
fullnameOverride: ""

# image configures the Docker image to use
image:
  repository: "lsstsqre/gafaelfawr"
  pullPolicy: "IfNotPresent"

  # image.tag overrides the default, which is the chart appVersion
  tag: ""

# imagePullSecrets list secret names to use for all Docker pulls
imagePullSecrets: []

# serviceAccount specifies the Kubernetes service account for the main
# Gafaelfawr container.  Unless CloudSQL is in use, the main container does
# not normally need a service account and will disable automounting of a
# service account token, but use of a service account can be forced by setting
# serviceAccount.create to true.  If CloudSQL is in use, a service account is
# always created regardless of the value of serviceAccount.create.
serviceAccount:
  create: false

  # Annotations to add to the service account.  If CloudSQL is in use, the
  # annotation specifying the Google service account will also be added.
  annotations: {}

  # The name of the service account to use.  If not set and create is true, a
  # name is generated using the fullname template.
  name: ""


# ingress configures the ingress, which is enabled by default.
ingress:
  enabled: true
  annotations: {}

  # ingress.host sets the hostname for the ingress.
  # This should normally be the same as config.host.
  host: ""

  # ingress.tls configures TLS for the ingress if needed.
  # If multiple ingresses share the same hostname, only one of them needs a
  # TLS configuration.
  tls: []

  # Temporary to allow values files to request use of the external hostname
  # for the auth-url annotation on the token ingress because the internal
  # hostname doesn't resolve at NCSA for some reason.
  externalAuthUrl: false

# resources defines resource limits and requests
resources: {}

# Additional optional configuration for how to deploy Gafaelfawr pods
podAnnotations: {}
nodeSelector: {}
tolerations: []
affinity: {}

# vaultSecretsPath sets the path to the Vault secret and must be set
# secret/k8s_operator/<host>/gafaelfawr
vaultSecretsPath: ""

# config specifies the Gafaelfawr configuration
config:
  # config.host is used to construct issuers and URLs and must be set
  host: ""

  # Choose from the text form of Python logging levels.
  loglevel: "INFO"

  # List of netblocks used for internal Kubernetes IP addresses, used to
  # determine the true client IP for logging.
  proxies:
    - "10.0.0.0/8"
    - "172.16.0.0/12"
    - "192.168.0.0/16"

  # Example configuration for using CILogon.
  # cilogon:
  #   clientId: "cilogon:/client_id/<some-id>"
  #
  #   # If the registered URL is different from /login (the default).
  #   redirectUrl: "https://<hostname>/oauth2/callback"
  #
  #   # Whether to use the test instance.
  #   test: false
  #
  #   # Additional parameters to add.
  #   loginParams:
  #     skin: "LSST"

  # Example configuration for using GitHub.
  # github:
  #   clientId: "<github-client-id>"

  issuer:
    # Session length and token expiration (in minutes).
    expMinutes: 43200  # 30 days

    # Whether to issue tokens for InfluxDB.  If set to true, influxdb-secret
    # must be set in the Gafaelfawr secret.  If username is also set, force
    # all InfluxDB tokens to have that username instead of the authenticated
    # identity of the user requesting a token.
    influxdb:
      enabled: false
      username: ""

  # Whether to support OpenID Connect clients.  If set to true,
  # oidc-server-secrets must be set in the Gafaelfawr secret.
  oidcServer:
    enabled: false

  # config.userScope sets the scope required to access the /auth/tokens route
  userScope: "exec:user"

  # config.knownScopes defines the names and descriptions of all scopes in
  # use.  This is used to populate the new token creation page.  Only scopes
  # listed here will be options when creating a new token.
  knownScopes:
    "exec:admin": Administrative access to all APIs
    "exec:notebook": Use the Notebook Aspect
    "exec:portal": Use the Portal Aspect
    "exec:user": Create and manage user tokens for your user
    "read:tap": Execute SELECT queries in the TAP interface on project datasets

  # config.groupMapping defines a mapping of scopes to groups that provide
  # that scope.  Tokens from an OpenID Connect provider such as CILogon that
  # include groups in an isMemberOf claim will be granted scopes based on this
  # mapping.
  groupMapping: {}

# cloudsql configures the Cloud SQL Auth Proxy sidecar, used with CloudSQL
# databases on Google Cloud
cloudsql:
  enabled: false
  image:
    repository: "gcr.io/cloudsql-docker/gce-proxy"
    tag: "1.21.0"
    pullPolicy: "IfNotPresent"

  # instanceConnectionName for a CloudSQL PostgreSQL instance.
  instanceConnectionName: ""

  # serviceAccount is the Google service account that has an IAM binding to
  # the gafaelfawr Kubernetes service account and has the cloudsql.client
  # role.
  serviceAccount: ""

# redis configures the internal Redis service
redis:
  image:
    repository: "redis"
    tag: "6.2.1"
    pullPolicy: "IfNotPresent"

  # By default, Redis will use dynamic provisioning of persistent storage and
  # request 1Gi of storage (which should be more than enough) using the
  # default storage class.
  #
  # To disable persistence entirely and use emptyDir, which will reset storage
  # on every restart (suitable only for a test deployment), set
  # redis.persistence.enabled to false.
  persistence:
    enabled: true
    size: "1Gi"
    storageClass: ""
    accessMode: "ReadWriteOnce"

    # volumeClaimName says to use an existing PVC, not dynamic provisioning.
    volumeClaimName: ""

  # Additional optional configuration for how to deploy the Redis pod
  podAnnotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
